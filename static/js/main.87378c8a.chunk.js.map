{"version":3,"sources":["Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Todolist","props","useState","error","setError","newTaskTitle","setNewTaskTitle","addTask","trim","id","title","onClick","removeTodolist","value","onChange","e","currentTarget","onKeyPress","charCode","className","tasks","map","t","key","isDone","type","changeTaskStatus","checked","removeTask","filter","changeFilter","App","todolistId","filteredTasks","tasksObj","setTasks","task","v1","newTasks","todolist","todolists","find","tl","setTodolist","changeStatus","taskId","todolistId1","todolistId2","filteredTodolists","tasksForTodolist","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"0QAoBO,SAASA,EAASC,GAAmB,IAAD,EACfC,mBAAsB,MADP,mBAClCC,EADkC,KAC3BC,EAD2B,OAGCF,mBAAS,IAHV,mBAGhCG,EAHgC,KAGlBC,EAHkB,KAejCC,EAAU,WACgB,KAAxBF,EAAaG,QACbP,EAAMM,QAAQF,EAAaG,OAAQP,EAAMQ,IACzCH,EAAgB,KAGrBF,EAAS,sBAkBZ,OAAQ,6BACA,gCAAMH,EAAMS,MAAZ,IAAmB,4BAAQC,QALhB,WACfV,EAAMW,eAAeX,EAAMQ,MAIJ,WACnB,6BACI,2BAAOI,MAAOR,EACPS,SAvCa,SAACC,GAC7BT,EAAgBS,EAAEC,cAAcH,QAuCjBI,WApCO,SAACF,GACvBX,EAAS,MACU,KAAfW,EAAEG,UACFX,KAkCWY,UAAWhB,EAAQ,QAAU,KACpC,4BAAQQ,QAASJ,GAAjB,KACCJ,GAAS,yBAAKgB,UAAU,iBAAiBhB,IAE9C,4BAEQF,EAAMmB,MAAMC,KAAI,SAACC,GAQb,OAAO,wBAAIC,IAAKD,EAAEb,GAAIU,UAAWG,EAAEE,OAAS,UAAY,IACpD,2BAAOC,KAAK,WACLX,SALa,SAACC,GACrBd,EAAMyB,iBAAiBJ,EAAEb,GAAIM,EAAEC,cAAcW,QAAS1B,EAAMQ,KAKrDkB,QAASL,EAAEE,SAClB,8BAAOF,EAAEZ,OACT,4BAAQC,QAZY,WACpBV,EAAM2B,WAAWN,EAAEb,GAAIR,EAAMQ,MAW7B,UAKhB,6BACI,4BAAQU,UAA4B,QAAflB,EAAM4B,OAAiB,gBAAkB,GAAIlB,QA5CpD,WACtBV,EAAM6B,aAAa,MAAO7B,EAAMQ,MA2CxB,OACA,4BAAQU,UAA4B,WAAflB,EAAM4B,OAAoB,gBAAkB,GAAIlB,QA1CpD,WACzBV,EAAM6B,aAAa,SAAU7B,EAAMQ,MAyC3B,UACA,4BAAQU,UAA4B,cAAflB,EAAM4B,OAAuB,gBAAkB,GAAIlB,QAxCpD,WAC5BV,EAAM6B,aAAa,YAAa7B,EAAMQ,MAuC9B,e,YCuBDsB,MAvGf,WAAgB,IAAD,EAEX,SAASH,EAAWnB,EAAYuB,GAC5B,IACIC,EADQC,EAASF,GACKH,QAAO,SAAAP,GAAC,OAAIA,EAAEb,KAAOA,KAC/CyB,EAASF,GAAcC,EACvBE,EAAS,eAAID,IAGjB,SAAS3B,EAAQG,EAAesB,GAC5B,IAAII,EAAO,CACP3B,GAAI4B,cACJ3B,MAAOA,EACPc,QAAQ,GAERJ,EAAQc,EAASF,GACjBM,EAAQ,CAAIF,GAAJ,mBAAahB,IACzBc,EAASF,GAAcM,EACvBH,EAAS,eAAKD,IAGd,SAASJ,EAAajB,EAAyBmB,GAC/C,IAAIO,EAAWC,EAAUC,MAAK,SAAAC,GAAE,OAAIA,EAAGjC,KAAOuB,KAC1CO,IACAA,EAASV,OAAQhB,EACjB8B,EAAY,YAAIH,KAIxB,SAASI,EAAaC,EAAgBrB,EAAiBQ,GACnD,IACII,EADQF,EAASF,GACJS,MAAK,SAAAnB,GAAC,OAAIA,EAAEb,KAAOoC,KAChCT,IACAA,EAAKZ,OAASA,GAElBW,EAAS,eAAID,IAGjB,IAAIY,EAAcT,cACdU,EAAcV,cAvCP,EAyCoBnC,mBAAgC,CAC3D,CAACO,GAAIqC,EAAapC,MAAO,gBAAiBmB,OAAQ,UAClD,CAACpB,GAAGsC,EAAarC,MAAO,cAAemB,OAAQ,eA3CxC,mBAyCNW,EAzCM,KAyCKG,EAzCL,KA8CP/B,EAAiB,SAACoB,GAClB,IAAIgB,EAAoBR,EAAUX,QAAO,SAAAa,GAAE,OAAIA,EAAGjC,KAAKuB,KACvDW,EAAaK,UACNd,EAASF,GAChBG,EAAS,eAAID,KAlDN,EAqDgBhC,oBAAQ,mBAC9B4C,EAAc,CACX,CAACrC,GAAI4B,cAAM3B,MAAO,MAAOc,QAAQ,GACjC,CAACf,GAAI4B,cAAM3B,MAAO,KAAMc,QAAQ,GAChC,CAACf,GAAI4B,cAAM3B,MAAO,QAASc,QAAQ,GACnC,CAACf,GAAI4B,cAAM3B,MAAO,QAASc,QAAQ,KALR,cAO/BuB,EAAc,CACV,CAACtC,GAAI4B,cAAM3B,MAAO,OAAQc,QAAQ,GAClC,CAACf,GAAI4B,cAAM3B,MAAO,OAAQc,QAAQ,KATP,IArDxB,mBAqDNU,EArDM,KAqDIC,EArDJ,KAkEX,OACI,yBAAKhB,UAAU,OACX,6BAEQqB,EAAUnB,KAAI,SAACqB,GAEX,IAAIO,EAAmBf,EAASQ,EAAGjC,IASnC,MAPkB,cAAdiC,EAAGb,SACHoB,EAAmBA,EAAiBpB,QAAO,SAAAP,GAAC,OAAiB,IAAbA,EAAEE,WAEpC,WAAdkB,EAAGb,SACHoB,EAAmBA,EAAiBpB,QAAO,SAAAP,GAAC,OAAiB,IAAbA,EAAEE,WAG/C,kBAACxB,EAAD,CACHuB,IAAKmB,EAAGjC,GACRA,GAAIiC,EAAGjC,GACPC,MAAOgC,EAAGhC,MACVU,MAAO6B,EACPrB,WAAYA,EACZE,aAAcA,EACdvB,QAASA,EACTmB,iBAAkBkB,EAClBf,OAAQa,EAAGb,OACXjB,eAAkBA,UC3F1BsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MACZC,SAASC,eAAe,SDoItB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA9D,GACL+D,QAAQ/D,MAAMA,EAAMgE,a","file":"static/js/main.87378c8a.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {FilterValuesType} from \"./App\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todoListId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todolistId: string) => void\r\n    filter: FilterValuesType,\r\n    removeTodolist: (todolistId: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n    let [error, setError] = useState<string|null>(null)\r\n\r\n    const [newTaskTitle, setNewTaskTitle] = useState(\"\");\r\n    const onNewTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            addTask();\r\n        }\r\n    }\r\n\r\n    const addTask = () => {\r\n        if (newTaskTitle.trim() !== \"\") {\r\n            props.addTask(newTaskTitle.trim(), props.id);\r\n            setNewTaskTitle(\"\");\r\n        }\r\n       else{\r\n       setError(\"Title is required\")\r\n       }\r\n    }\r\n\r\n\r\n    const onAllClickHandler = () => {\r\n        props.changeFilter(\"all\", props.id)\r\n    }\r\n    const onActiveClickHandler = () => {\r\n        props.changeFilter(\"active\", props.id)\r\n    }\r\n    const onCompletedClickHandler = () => {\r\n        props.changeFilter(\"completed\", props.id)\r\n    }\r\nconst removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n}\r\n\r\n    return (<div>\r\n            <h3> {props.title} <button onClick={removeTodolist}>delete</button></h3>\r\n            <div>\r\n                <input value={newTaskTitle}\r\n                       onChange={onNewTitleChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       className={error ? \"error\" : \"\"}/>\r\n                <button onClick={addTask}>+</button>\r\n                {error && <div className=\"error-message\">{error}</div>}\r\n            </div>\r\n            <ul>\r\n                {\r\n                    props.tasks.map((t) => {\r\n                        const onRemoveHandler = () => {\r\n                            props.removeTask(t.id, props.id)\r\n                        }\r\n                        const onClickHandler = () => props.removeTask(t.id, props.id)\r\n                        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                            props.changeTaskStatus(t.id, e.currentTarget.checked, props.id)\r\n                        }\r\n                        return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                            <input type=\"checkbox\"\r\n                                   onChange={onChangeHandler}\r\n                                   checked={t.isDone}/>\r\n                            <span>{t.title}</span>\r\n                            <button onClick={onRemoveHandler}>x</button>\r\n                        </li>\r\n                    })\r\n                }\r\n            </ul>\r\n            <div>\r\n                <button className = {props.filter==='all' ? \"active-filter\" : \"\"} onClick={onAllClickHandler}>All</button>\r\n                <button className = {props.filter==='active' ? \"active-filter\" : \"\"} onClick={onActiveClickHandler}>Active</button>\r\n                <button className = {props.filter==='completed' ? \"active-filter\" : \"\"} onClick={onCompletedClickHandler}>Completed</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from \"./Todolist\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type FilterValuesType = \"all\" | \"completed\" | \"active\";\r\ntype TodoListType = {\r\n    id: string,\r\n    title: string,\r\n    filter: FilterValuesType\r\n}\r\n\r\nfunction App() {\r\n\r\n    function removeTask(id: string, todolistId: string) {\r\n        let tasks = tasksObj[todolistId];\r\n        let filteredTasks = tasks.filter(t => t.id !== id);\r\n        tasksObj[todolistId] = filteredTasks\r\n        setTasks({...tasksObj});\r\n    }\r\n\r\n    function addTask(title: string, todolistId: string) {\r\n        let task = {\r\n            id: v1(),\r\n            title: title,\r\n            isDone: false\r\n        };\r\n        let tasks = tasksObj[todolistId];\r\n        let newTasks = [task, ...tasks];\r\n        tasksObj[todolistId] = newTasks\r\n        setTasks({... tasksObj});\r\n    }\r\n\r\n        function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        let todolist = todolists.find(tl => tl.id === todolistId);\r\n        if (todolist){\r\n            todolist.filter =value;\r\n            setTodolist([...todolists]);\r\n        }\r\n    }\r\n\r\n    function changeStatus(taskId: string, isDone: boolean, todolistId: string) {\r\n        let tasks = tasksObj[todolistId]\r\n        let task = tasks.find(t => t.id === taskId);\r\n        if (task) {\r\n            task.isDone = isDone;\r\n        }\r\n        setTasks({...tasksObj})\r\n    }\r\n\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    let [todolists, setTodolist] = useState <Array<TodoListType>> ([\r\n        {id: todolistId1, title: \"What to learn\", filter: \"active\"},\r\n        {id:todolistId2, title: \"What to buy\", filter: \"completed\"}\r\n    ]);\r\n\r\n    let removeTodolist = (todolistId: string) => {\r\n        let filteredTodolists = todolists.filter(tl => tl.id!==todolistId)\r\n        setTodolist (filteredTodolists);\r\n        delete tasksObj[todolistId];\r\n        setTasks({...tasksObj});\r\n    }\r\n\r\n    let [tasksObj, setTasks] = useState({\r\n        [todolistId1]: [\r\n            {id: v1(), title: \"CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"React\", isDone: false},\r\n            {id: v1(), title: \"Redux\", isDone: false}\r\n            ],\r\n       [todolistId2]: [\r\n            {id: v1(), title: \"Book\", isDone: false},\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n        ]\r\n    });\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div>\r\n                {\r\n                    todolists.map((tl) => {\r\n\r\n                        let tasksForTodolist = tasksObj[tl.id];\r\n\r\n                        if (tl.filter === \"completed\") {\r\n                            tasksForTodolist = tasksForTodolist.filter(t => t.isDone === true)\r\n                        }\r\n                        if (tl.filter === \"active\") {\r\n                            tasksForTodolist = tasksForTodolist.filter(t => t.isDone === false)\r\n                        }\r\n\r\n                        return <Todolist\r\n                            key={tl.id}\r\n                            id={tl.id}\r\n                            title={tl.title}\r\n                            tasks={tasksForTodolist}\r\n                            removeTask={removeTask}\r\n                            changeFilter={changeFilter}\r\n                            addTask={addTask}\r\n                            changeTaskStatus={changeStatus}\r\n                            filter={tl.filter}\r\n                            removeTodolist = {removeTodolist}\r\n                        />\r\n                    })\r\n                }\r\n\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}