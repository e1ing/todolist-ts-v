{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","initialized","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","resultCode","action","updateTaskAC","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","todolist","addTask","changeFilter","removeTodolist","changeTodolistTitle","useDispatch","useEffect","thunk","items","setTasksAC","addTaskHandler","changeTodolistTitleHandler","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","map","style","paddingTop","Button","TodolistsList","useSelector","state","app","todolists","auth","catch","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","App","logoutHandler","basename","process","AppBar","position","Toolbar","edge","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","fontSize","textAlign","from","top","left","width","rootReducer","combineReducers","todoListId","copyState","forEach","entityStatus","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4b727dee.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'b00b044a-fabf-40f0-8522-d4dd85a812f0'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId: string }>>(\"auth/login\", data)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{ userId?: string }>>(\"auth/login\")\r\n    },\r\n    me(){\r\n        return instance.get<ResponseType<{id:number, email:string, login: string}>>(\"auth/me\")\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\nexport type LoginParamsType = {\r\n    email: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n\r\n}\r\n\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {setAppErrorAC, SetAppErrorAT, setAppStatusAC, SetAppStatusAT} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorAT | SetAppStatusAT>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorAT | SetAppStatusAT>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import {Dispatch} from \"redux\"\r\nimport {SetAppErrorAT, setAppStatusAC, SetAppStatusAT} from \"../../app/app-reducer\";\r\nimport {authAPI, LoginParamsType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n//types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC>|SetAppErrorAT|SetAppStatusAT\r\ntype InitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"login/SET-IS-LOGGED-IN\":\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n//action creator\r\n\r\nexport const setIsLoggedInAC = (value: boolean) => ({type: \"login/SET-IS-LOGGED-IN\", value} as const)\r\n\r\n//thunk creators\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    authAPI.login(data)\r\n        .then(res=> {\r\n            if (res.data.resultCode===0){\r\n              dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            }else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n         })\r\n        .catch((error)=> {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    authAPI.logout()\r\n        .then(res=> {\r\n            if (res.data.resultCode===0){\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            }else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error)=> {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n","import { Dispatch } from \"redux\"\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\n\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string|null,\r\n    initialized: false\r\n}\r\n\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-IS-INITIALIZED':\r\n            return {...state, initialized: action.value}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppInitializedAC = (value: boolean) => ({type: 'APP/SET-IS-INITIALIZED', value} as const)\r\nexport const  initializeAppTC = () => (dispatch: Dispatch) => {\r\nauthAPI.me().then(res => {\r\n    if(res.data.resultCode===0){\r\n        dispatch(setIsLoggedInAC(true))\r\n\r\n    }else{\r\n\r\n    }\r\n    dispatch(setAppInitializedAC(true))\r\n})\r\n}\r\n\r\n//types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type SetAppErrorAT = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusAT = ReturnType<typeof setAppStatusAC>\r\ntype ActionsType = SetAppErrorAT | SetAppStatusAT| ReturnType<typeof setAppInitializedAC>\r\nexport type InitialStateType = typeof initialState","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, SetAppErrorAT, setAppStatusAC, SetAppStatusAT} from \"../../app/app-reducer\";\r\nimport {handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: \"idle\"}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, status: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: \"idle\"}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER', id, filter\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\nexport const changeTodolistEntitiStatusAC = (id: string, status: string) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS',\r\n    id,\r\n    status\r\n} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        dispatch(changeTodolistEntitiStatusAC(todolistId, \"loading\"))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            })\r\n    }\r\n}\r\n\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | SetAppStatusAT\r\n    | ReturnType<typeof changeTodolistEntitiStatusAC>\r\n    | SetAppErrorAT\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC, SetAppErrorAT, setAppStatusAC, SetAppStatusAT} from \"../../app/app-reducer\";\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils';\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if(res.data.resultCode===0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC(\"succeeded\"))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n    | SetAppErrorAT\r\n    | SetAppStatusAT\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n                   disabled={disabled}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n    disabled: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({\r\n                                                 demo = false, todolist,\r\n                                                 tasks, addTask, removeTask, changeFilter,\r\n                                                 changeTaskTitle, changeTaskStatus,\r\n                                                 removeTodolist, changeTodolistTitle, disabled\r\n                                             }: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return;\r\n        }\r\n        const thunk = fetchTasksTC(todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTaskHandler = useCallback((title: string) => {\r\n        addTask(title, todolist.id)\r\n    }, [addTask, todolist.id])\r\n\r\n    const removeTodolistHandler = () => {\r\n        removeTodolist(todolist.id)\r\n    }\r\n    const changeTodolistTitleHandler = useCallback((title: string) => {\r\n        changeTodolistTitle(todolist.id, title)\r\n    }, [todolist.id, changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => changeFilter('all', todolist.id), [todolist.id, changeFilter])\r\n    const onActiveClickHandler = useCallback(() => changeFilter('active', todolist.id), [todolist.id, changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => changeFilter('completed', todolist.id), [todolist.id, changeFilter])\r\n\r\n\r\n    let tasksForTodolist = tasks\r\n\r\n    if (todolist.filter === 'active') {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (todolist.filter === 'completed') {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={todolist.title} onChange={changeTodolistTitleHandler}/>\r\n            <IconButton onClick={removeTodolistHandler} disabled={disabled}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTaskHandler} disabled={disabled}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={todolist.id}\r\n                                                removeTask={removeTask}\r\n                                                changeTaskTitle={changeTaskTitle}\r\n                                                changeTaskStatus={changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {FC, useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport { Redirect } from 'react-router-dom'\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\n\r\ntype TodolistsListPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: FC<TodolistsListPropsType> = ({demo=false}) => {\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean> (state => state.auth.isLoggedIn)\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (demo|| !isLoggedIn){\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist} disabled={status === 'loading'}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                disabled={status === 'loading'}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n\r\n","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {makeStyles, Theme} from '@material-ui/core/styles';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport default function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, string|null>(state=>state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n\r\n    const isOpen = error!==null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from 'formik'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Password required';\r\n            } else if (values.password.length <3) {\r\n                errors.password = 'Must be more then 3 characters';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm();\r\n        }\r\n    })\r\n\r\n    if(isLoggedIn) {\r\n        return <Redirect to={\"/\"}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n\r\n                        {formik.touched.email &&\r\n                        formik.errors.email &&\r\n                        <div style={{color: \"red\"}}>{formik.errors.email}</div>}\r\n\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n\r\n                        {formik.touched.password &&\r\n                        formik.errors.password &&\r\n                        <div style={{color: \"red\"}}>{formik.errors.password}</div>}\r\n\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox/>}\r\n                            {...formik.getFieldProps(\"rememberMe\")}\r\n                            checked={formik.values.rememberMe}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n","import React, {useCallback} from 'react'\r\nimport './App.css'\r\nimport {AppBar, Button, Container, IconButton, Toolbar, Typography} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport ErrorSnackbar from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from \"./store\";\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport {BrowserRouter, Redirect, Route, Switch} from \"react-router-dom\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport CircularProgress from '@material-ui/core/CircularProgress/CircularProgress'\r\nimport {useEffect} from 'react'\r\nimport {logoutTC} from \"../features/Login/auth-reducer\";\r\n\r\ntype AppPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: AppPropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const initialized = useSelector<AppRootStateType, boolean>(state => state.app.initialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    })\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, []);\r\n\r\n    if (!initialized) {\r\n        return <div style={{position: \"fixed\", top: '30%', left: \"50%\", width: \"100%\"}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n            <div className=\"App\">\r\n                <ErrorSnackbar/>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            News\r\n                        </Typography>\r\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n\r\n                    </Toolbar>\r\n                    {status === \"loading\" && <LinearProgress/>}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Switch>\r\n                        <Route exact path={\"/\"} render={() => <TodolistsList demo={demo}/>}/>\r\n                        <Route path={\"/login\"} render={() => <Login/>}/>\r\n                        <Route path={\"/404\"}\r\n                               render={() => <h1 style={{fontSize: \"50px\", textAlign: \"center\"}}>\r\n                                   404: page not found</h1>}/>\r\n                        <Redirect from={\"*\"} to={\"/404\"}/>\r\n                    </Switch>\r\n                </Container>\r\n            </div>\r\n        </BrowserRouter>\r\n    )\r\n\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}