{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","initialState","updateTaskTC","domainModel","dispatch","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","status","res","action","type","updateTaskAC","console","warn","AddItemForm","React","memo","props","log","useState","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","useDispatch","useEffect","thunk","setTasksAC","data","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","map","style","paddingTop","Button","TodolistsList","todolists","useSelector","state","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","todolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","App","AppBar","position","Toolbar","edge","Menu","Typography","Container","fixed","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4a8297e8.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'b00b044a-fabf-40f0-8522-d4dd85a812f0'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n}\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            const action = setTasksAC(tasks, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            const task = res.data.data.item\r\n            const action = addTaskAC(task)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                dispatch(action)\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        const thunk = fetchTasksTC(props.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                id={tl.id}\r\n                                title={tl.title}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                filter={tl.filter}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport './App.css'\r\nimport {AppBar, Button, Container, IconButton, Toolbar, Typography} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <TodolistsList/>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}