{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","utils/error-utils.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","initialState","status","error","setAppErrorAC","type","setAppStatusAC","handleServerAppError","data","dispatch","messages","length","addTaskTC","res","resultCode","action","task","addTaskAC","item","catch","message","handleServerNetworkError","updateTaskTC","domainModel","getState","tasks","find","t","apiModel","deadline","description","priority","startDate","updateTaskAC","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","todolist","addTask","changeFilter","removeTodolist","changeTodolistTitle","useDispatch","useEffect","thunk","items","setTasksAC","addTaskHandler","changeTodolistTitleHandler","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","entityStatus","map","style","paddingTop","Button","TodolistsList","todolists","useSelector","state","removeTaskAC","removeTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","App","AppBar","position","Toolbar","edge","Menu","Typography","LinearProgress","Container","fixed","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a0fab530.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'b00b044a-fabf-40f0-8522-d4dd85a812f0'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string|null\r\n}\r\n\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\n\r\n\r\n//types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type SetAppErrorAT = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusAT = ReturnType<typeof setAppStatusAC>\r\ntype ActionsType = SetAppErrorAT | SetAppStatusAT\r\nexport type InitialStateType = typeof initialState","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusAT} from \"../../app/app-reducer\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: \"idle\"}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, status: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: \"idle\"}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER', id, filter} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\nexport const changeTodolistEntitiStatusAC =  (id:string, status: string) => ({type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        dispatch(changeTodolistEntitiStatusAC(todolistId,\"loading\"))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | SetAppStatusAT\r\n    | ReturnType<typeof changeTodolistEntitiStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {setAppErrorAC, SetAppErrorAT, setAppStatusAC, SetAppStatusAT} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorAT | SetAppStatusAT>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorAT | SetAppStatusAT>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC, SetAppErrorAT, setAppStatusAC, SetAppStatusAT} from \"../../app/app-reducer\";\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils';\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if(res.data.resultCode===0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n    | SetAppErrorAT\r\n    | SetAppStatusAT\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled=false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n                   disabled = {disabled}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled = {disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo=false, todolist,\r\n                                                 tasks, addTask,removeTask, changeFilter,\r\n                                                 changeTaskTitle, changeTaskStatus,\r\n                                                 removeTodolist, changeTodolistTitle}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo){\r\n            return;\r\n        }\r\n        const thunk = fetchTasksTC(todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTaskHandler = useCallback((title: string) => {\r\n        addTask(title, todolist.id)\r\n    }, [addTask, todolist.id])\r\n\r\n    const removeTodolistHandler = () => {\r\n        removeTodolist(todolist.id)\r\n    }\r\n    const changeTodolistTitleHandler = useCallback((title: string) => {\r\n        changeTodolistTitle(todolist.id, title)\r\n    }, [todolist.id, changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => changeFilter('all', todolist.id), [todolist.id, changeFilter])\r\n    const onActiveClickHandler = useCallback(() => changeFilter('active', todolist.id), [todolist.id, changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => changeFilter('completed', todolist.id), [todolist.id, changeFilter])\r\n\r\n\r\n    let tasksForTodolist = tasks\r\n\r\n    if (todolist.filter === 'active') {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (todolist.filter === 'completed') {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={todolist.title} onChange={changeTodolistTitleHandler}/>\r\n            <IconButton onClick={removeTodolistHandler} disabled={todolist.entityStatus===\"loading\"}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTaskHandler} disabled={todolist.entityStatus===\"loading\"}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={todolist.id}\r\n                                                removeTask={removeTask}\r\n                                                changeTaskTitle={changeTaskTitle}\r\n                                                changeTaskStatus={changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {FC, useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\n\r\nexport const TodolistsList: FC<TodolistsListPropsType> = ({demo=false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo){\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n\r\ntype TodolistsListPropsType = {\r\n    demo?: boolean\r\n}","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {makeStyles, Theme} from '@material-ui/core/styles';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport default function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, string|null>(state=>state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n\r\n    const isOpen = error!==null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport './App.css'\r\nimport {AppBar, Button, Container, IconButton, Toolbar, Typography} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport ErrorSnackbar from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport { useSelector } from 'react-redux'\r\nimport {AppRootStateType} from \"./store\";\r\nimport { RequestStatusType } from './app-reducer'\r\n\r\nfunction App ({demo=false}:AppPropsType) {\r\nconst status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n                {status===\"loading\" && <LinearProgress />}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <TodolistsList/>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n\r\ntype AppPropsType = {\r\n    demo?: boolean\r\n}\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}