{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","state/tasks-reducer.ts","Task.tsx","Todolist.tsx","state/todolists-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","useState","newTaskTitle","setNewTaskTitle","error","setError","addTask","trim","addItem","TextField","variant","label","helperText","value","onChange","e","currentTarget","onKeyPress","charCode","IconButton","onClick","color","ControlPoint","EditableSpan","editMode","setEditMode","title","setTitle","onBlur","autoFocus","onDoubleClick","initialState","removeTaskAC","taskId","todolistId","type","changeTaskStatusAC","isDone","changeTaskTitleAC","Task","task","dispatch","useDispatch","changeTaskTitle","useCallback","newTitle","changeTaskStatus","id","removeTask","key","className","Checkbox","checked","Delete","Todolist","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","tasks","filter","t","removeTodolist","map","style","paddingTop","Button","AppWithRedux","todolists","useSelector","state","action","addTaskAC","changeTodolistTitleAC","addTodolist","v1","addTodolistAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","spacing","tl","item","Paper","rootReducer","combineReducers","todolist","find","stateCopy","filteredTasks","newTask","newTasks","todolistTasks","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.5f3a9382.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {Button, IconButton, TextField} from \"@material-ui/core\";\r\nimport {ControlPoint} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo ((props: AddItemFormPropsType) => {\r\n    const [newTaskTitle, setNewTaskTitle] = useState(\"\");\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const onNewTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n            if (e.charCode === 13) {\r\n                addTask();\r\n            }\r\n        }\r\n    }\r\n\r\n    const addTask = () => {\r\n        if (newTaskTitle.trim() !== \"\") {\r\n            props.addItem(newTaskTitle.trim());\r\n            setNewTaskTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant={'outlined'} label={'Enter value'} error={!!error} helperText={error}\r\n                   value={newTaskTitle}\r\n                   onChange={onNewTitleChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n        />\r\n        <IconButton onClick={addTask} color={'primary'}>\r\n            <ControlPoint/>\r\n        </IconButton>\r\n\r\n    </div>\r\n})","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState(\"\")\r\n\r\n    const activeEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.title)\r\n    }\r\n    const activeViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n\r\n    return editMode\r\n        ? <TextField value={title} onBlur={activeViewMode} autoFocus onChange={onChangeTitleHandler}/>\r\n        : <span onDoubleClick={activeEditMode}>{props.title}</span>\r\n})","import {FilterValuesType, TasksStateType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {AddTodolistAT, RemoveTodolistAT} from \"./todolists-reducer\";\r\n\r\ntype RemoveTaskAT = {\r\n    type: 'REMOVE-TASK'\r\n    taskId: string\r\n    todolistId: string\r\n}\r\n\r\ntype AddTaskAT = {\r\n    type: 'ADD-TASK'\r\n    title: string\r\n    todolistId: string\r\n}\r\n\r\ntype ChangeTaskStatusAT= {\r\n    type:  'CHANGE_TASK_STATUS'\r\n    taskId: string\r\n    isDone: boolean\r\n    todolistId: string\r\n}\r\n\r\ntype ChangeTaskTitleAT= {\r\n    type:  'CHANGE_TASK_TITLE'\r\n    taskId: string\r\n    title: string\r\n    todolistId: string\r\n}\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\ntype ActionsType = RemoveTaskAT | AddTaskAT | ChangeTaskStatusAT| ChangeTaskTitleAT |AddTodolistAT|RemoveTodolistAT\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = state[action.todolistId]\r\n            const filteredTasks = tasks.filter(t => t.id !== action.taskId)\r\n            stateCopy[action.todolistId] = filteredTasks;\r\n            return stateCopy\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTask = {\r\n                id: v1(),\r\n                title: action.title,\r\n                isDone: false\r\n            };\r\n            const newTasks = [newTask, ...tasks];\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n\r\n        case 'CHANGE_TASK_STATUS': {\r\n            let todolistTasks = state[action.todolistId];\r\n            state[action.todolistId]=todolistTasks.map(t=>t.id===action.taskId\r\n                ?{...t, isDone: action.isDone}\r\n            : t);\r\n            return ({...state});\r\n        }\r\n\r\n        case 'CHANGE_TASK_TITLE': {\r\n            let todolistTasks = state[action.todolistId];\r\n            state[action.todolistId]=todolistTasks.map(t=>t.id===action.taskId\r\n                ?{...t, title: action.title}\r\n                : t);\r\n            return ({...state});\r\n        }\r\n\r\n        case \"ADD-TODOLIST\":{\r\n            const stateCopy={...state};\r\n            stateCopy[action.todolistId] = []\r\n            return stateCopy;\r\n        }\r\n\r\n        case \"REMOVE-TODOLIST\": {\r\n            const stateCopy={...state};\r\n            delete stateCopy[action.id]\r\n            return stateCopy;\r\n        }\r\n\r\n        default: return state;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskAT => {\r\n    return {type: 'REMOVE-TASK', taskId, todolistId}\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskAT => {\r\n    return {type: 'ADD-TASK', title, todolistId}\r\n}\r\n\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string): ChangeTaskStatusAT => {\r\n    return {type: 'CHANGE_TASK_STATUS', taskId, isDone, todolistId}\r\n}\r\n\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleAT => {\r\n    return {type: 'CHANGE_TASK_TITLE', taskId, title, todolistId}\r\n}\r\n\r\n\r\n","import React, {useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskType} from \"./Todolist\";\r\nimport {changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/tasks-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\nexport const Task: React.FC<TaskPropsType> = React.memo( (\r\n    {task,todolistId}) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const changeTaskTitle = useCallback((taskId: string, newTitle: string, todolistId: string) =>\r\n        dispatch(changeTaskTitleAC(taskId, newTitle, todolistId)), [dispatch])\r\n\r\n    const changeTaskStatus = useCallback((id: string, isDone: boolean, todolistId: string) =>\r\n        dispatch(changeTaskStatusAC(id, isDone, todolistId)), [dispatch])\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) =>\r\n        dispatch(removeTaskAC(id, todolistId)), [dispatch])\r\n\r\n\r\n\r\n\r\n    return <div key={task.id} className={task.isDone ? \"is-done\" : \"\"}>\r\n        <Checkbox\r\n            checked={task.isDone}\r\n            color=\"primary\"\r\n            onChange={(e) => changeTaskStatus(task.id, e.currentTarget.checked,todolistId)}\r\n        />\r\n\r\n        <EditableSpan title={task.title} onChange={(newTitle) => changeTaskTitle(task.id, newTitle, todolistId)} />\r\n        <IconButton onClick={() => removeTask(task.id, todolistId)}>\r\n            <Delete />\r\n        </IconButton>\r\n    </div>\r\n})","import React, {useCallback} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from \"./Task\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (todolistId: string, value: FilterValuesType) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n    const dispatch = useDispatch();\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id);\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id);\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.changeTodolistTitle, props.id]);\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter(props.id, \"all\"), [props.changeFilter, props.id]);\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter(props.id, \"active\"), [props.changeFilter, props.id]);\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter(props.id, \"completed\"), [props.changeFilter, props.id]);\r\n\r\n    let tasksForTodolist = props.tasks\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(t => !t.isDone );\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone);\r\n    }\r\n\r\n\r\n\r\n    return <div>\r\n        <h3><EditableSpan title={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => {\r\n                    return  <Task\r\n                        task={t}\r\n                        todolistId={props.id}\r\n                        key={t.id}\r\n                    />\r\n                })\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: \"10px\"}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {FilterValuesType, TodolistType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\n\r\ntype ActionType = {\r\n    type: string\r\n    [key: string]: any\r\n}\r\n\r\nexport type RemoveTodolistAT = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\n\r\nexport type AddTodolistAT = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    todolistId: string\r\n}\r\ntype ChangeTodolistTitleAT = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterAT = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nconst initialState: Array<TodolistType> =[]\r\n\r\ntype ActionsType = RemoveTodolistAT | AddTodolistAT | ChangeTodolistTitleAT | ChangeTodolistFilterAT\r\n\r\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: ActionsType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [ {\r\n                id: action.todolistId,\r\n                filter: 'all',\r\n                title: action.title,\r\n            }, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id)\r\n            if (todolist) {\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            debugger\r\n            const todolist = state.find(tl => tl.id === action.id)\r\n            if (todolist) {\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n\r\n        default: return state;\r\n    }\r\n}\r\n\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistAT => {\r\n    return { type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const addTodolistAC = (title: string): AddTodolistAT => {\r\n    return { type: 'ADD-TODOLIST', title: title, todolistId: v1()}\r\n}\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleAT => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id: id, title}\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterAT => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id, filter}\r\n}\r\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    removeTodolistAC,\r\n} from './state/todolists-reducer';\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, tasksReducer} from './state/tasks-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './state/store';\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    const removeTask = useCallback ((id: string, todolistId: string) => {\r\n        const action = removeTaskAC(id, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        const action = addTaskAC(title, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((id: string, isDone: boolean, todolistId: string)=> {\r\n        const action = changeTaskStatusAC(id, isDone, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        const action = changeTaskTitleAC(id, newTitle, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((todolistId: string, value: FilterValuesType) => {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((id: string) => {\r\n        const action = removeTodolistAC(id);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((id: string, title: string) => {\r\n        const action = changeTodolistTitleAC(id, title);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const action = addTodolistAC(title);\r\n        dispatch(action);\r\n    },[dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n                            let tasksForTodolist = allTodolistTasks;\r\n\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasksForTodolist}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {todolistsReducer} from \"./todolists-reducer\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer\r\n});\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\r\nexport const store = createStore(rootReducer);\r\n\r\n\r\n//@ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux />\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}